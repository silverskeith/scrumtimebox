{"version":3,"sources":["Components/PresetButton.js","Components/Clock.js","Components/Button.js","Components/Input.js","Components/App.js","serviceWorker.js","index.js"],"names":["PresetBtn","className","onClick","this","props","onClickHandler","label","React","Component","Clock","time","seconds","minutes","Math","floor","toString","length","format","Button","Input","event","preventDefault","strSeconds","refs","value","match","onSetCountdown","parseInt","ref","onSubmit","bind","type","placeholder","App","state","count","running","prevProps","prevState","handleStart","timer","setInterval","newCount","setState","clearInterval","handlePreset","handleCountdown","handleStop","handleReset","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bc10f27.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class PresetBtn extends React.Component {\n  render() {\n    return (\n      <button className=\"preset\" onClick={this.props.onClickHandler}>\n        {this.props.label}\n      </button>\n    );\n  }\n}","import React from \"react\";\n\nexport default class Clock extends React.Component {\n    format(time) {\n        let seconds = time % 60;\n        let minutes = Math.floor(time / 60);\n        minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes;\n        seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds;\n\n        return minutes + \":\" + seconds;\n    }\n\n    render() {\n        const {time} = this.props;\n        return(\n            <div className='displayedTime'>\n                <h1>{this.format(time)}</h1>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Button extends React.Component {\n    render() {\n        return (\n            <button onClick={this.props.onClickHandler}>{this.props.label}</button>\n        )\n    }\n}\n","import React from \"react\";\n\nexport default class Input extends React.Component {\n  onSubmit(event) {\n    event.preventDefault();\n    // console.log('onSubmit', this.secondRef.current.value);\n    const strSeconds = this.refs.seconds.value;\n    // const strSeconds = this.secondRef.current.value;\n\n    if (strSeconds.match(/[0-9]/)) {\n      this.refs.seconds.value = \"\";\n      this.props.onSetCountdown(parseInt(strSeconds, 10));\n    }\n  }\n\n  render() {\n    return (\n      <form ref=\"form\" onSubmit={this.onSubmit.bind(this)}>\n        <input type=\"text\" ref=\"seconds\" placeholder=\"Enter time in seconds\" />\n        <input type=\"submit\" value=\"Start\"></input>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport PresetBtn from \"./PresetButton\";\nimport Clock from \"./Clock\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      running: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.refs[this.state.count].refs.seconds.value = this.state.count;\n\n    if (this.state.running !== prevState.running) {\n      switch (this.state.running) {\n        case true:\n          this.handleStart();\n          break;\n        default:\n      }\n    }\n  }\n\n  handleStart() {\n    this.timer = setInterval(() => {\n      const newCount = this.state.count - 1;\n      this.setState({ count: newCount >= 0 ? newCount : 0 });\n    }, 1000);\n  }\n\n  handleStop() {\n    this.refs[this.state.count].refs.seconds.value = this.state.count;\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.setState({ running: false });\n    }\n  }\n\n  handleReset() {\n    this.setState({ count: 0 });\n  }\n\n  handleCountdown(seconds) {\n    this.setState({ count: seconds, running: true });\n  }\n\n  handlePreset(seconds) {\n    this.refs[this.state.count].refs.seconds.value = seconds;\n    this.setState({ count: seconds, running: true });\n  }\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div className=\"container\">\n        <Clock time={count} />\n        <PresetBtn\n          label=\"15 mins\"\n          onClickHandler={this.handlePreset.bind(this, 900)}\n        />\n        <PresetBtn\n          label=\"10 mins\"\n          onClickHandler={this.handlePreset.bind(this, 600)}\n        />\n        <PresetBtn\n          label=\"5 mins\"\n          onClickHandler={this.handlePreset.bind(this, 300)}\n        />\n        <Input\n          ref={this.state.count}\n          onSetCountdown={this.handleCountdown.bind(this)}\n        />\n        <Button label=\"Stop\" onClickHandler={this.handleStop.bind(this)} />\n        <Button label=\"Reset\" onClickHandler={this.handleReset.bind(this)} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"app\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}